sudo: required
services: 
  - docker
# language: ruby
# rvm:
#   - 2.2.3
language: node_js
node_js:
  - "6.0"
before_install:
  - echo $TRIGGER_REPO
  - echo $CUC_TAG
  # Pull latest docker image from last step to test against before it gets updated by someone else
  - docker pull $TRIGGER_REPO
  # Set Ruby version
  - rvm use --install --binary 2.2.3
  - rvm use ruby-2.2.3
  # Install chrome & chromium
  - wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
  - sudo sh -c 'echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
  - sudo apt-get update
  - sudo apt-get install google-chrome-stable
  # Install xvfb
  - "/sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -ac -screen 0 1280x1024x16"
before_script:
  # Install chrome & chromium
  - sudo apt-get update
  - sudo apt-get -y install chromium-bsu
  # Install UI test requirements
  - npm install -g protractor grunt-cli
  - webdriver-manager update
  # Update Ruby cucumber dependencies
  - bundle install
  # Update Node UI test dependencies
  - cd nci-match-ui-bddtests
  - npm install
  - cd ..
  # Version reporting
  - ruby -v
  - bundle --version
  - gem --version
  # Install xvfb
  # - "export DISPLAY=:99.0"
  # - "sh -e /etc/init.d/xvfb start"
  # - sleep 3 # give xvfb some time to start
  # Run Delete Script to empty DynamoDB before tests start
  - cd DeleteScript
  - ./dynamo_delete_script.rb -p _test -a $AWS_ACCESS_KEY_ID -s $AWS_SECRET_ACCESS_KEY -e 'https://dynamodb.us-east-1.amazonaws.com' -r us-east-1
  - cd ..
  # Reset ECOG Mock service Data
  - curl -X POST "http://pedmatch.org:3000/restart" -d ''
script:
  # Run Cucumber @tag specific tests
  - cd uMATCH/PedMATCH; bundle exec parallel_cucumber features/ -o '-r features/step_definitions/ -r features/support/ -t $CUC_TAG --format pretty' -n 4
  - cd ../..
  # Run Cucumber end to end tests
  # - bundle exec cucumber --tags @EndtoEnd
  # Install xvfb
  - "export DISPLAY=:99.0"
  - "sh -e /etc/init.d/xvfb start"
  - sleep 3 # give xvfb some time to start
  # Run UI tests
  - cd nci-match-ui-bddtests/
  - protractor config.js
after_success:
  # Tag latest version of docker image tested agains with a date stamp as release candidate
  - docker login -e="$DOCKER_EMAIL" -u="$DOCKER_USERNAME" -p="$DOCKER_PASSWORD"
  - export DATE=`date "+%m-%d-%y-%H%M"`
  - docker tag -f $TRIGGER_REPO $TRIGGER_REPO:$DATE
  - docker images
  - docker push  $TRIGGER_REPO:$DATE 
  # Push to AWS and trigger next step
 # - aws ecs update-service --cluster uMatch-Test --service uMatch-nci-treatment-arm-api-TEST --task-definition uMatch-nci-treatment-arm-api-TEST 
  # - docker run -it --rm -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION=us-east-1 silintl/ecs-deploy --cluster uMatch-Test --service-name uMatch-nci-treatment-arm-api-TEST -i matchbox/nci-treatment-arm-api:latest
notifications:
  slack:
    # secure: G2Vusym37c8C5Opee14JXdbVQGNe56e8G2xTM1zeBignME9/pbg3F4+DumvRV1pE6A/RHjlG3socbdIFnoMecG+nUXE3hymNoKrjI/FnPClDulxXllNFMZgWhafq6giX7bXgyaudNFVa2PZkPPzjr6SsGngcR/BAHcz2FqqGDr161TJMU/8BshnSMhxAfxSwFg2GnDMOgar2R3UYVkjhWqnIzM5YrpdeqzVofeM5kJaoq73gxQEnaneywLvHfSCSjDXSxIZm54L97kkpg3a4njZ/CHqUB19yY+IsE1tAygS3515+F6kZPOi1PJ7jPq5Ht3kFgpaTXrOmrXd8HeMJuKEdFKkgTD0NEIvYQfNmUZHhA25an+ePG3e45CNf8IMB0dyWmH6vY05lBujB/5plo2Fsx+HBjx14kq/z7ZWdX70qSYDJIWqLGGMnnHzkULLCBPhRKqXQsXERl0ST6BeDWCekEFtvFd+6gQjwcRgo3+AquUhobgFUVs4JzZYfStZEyxEG9sdxy1wVZjVWHCN+U75095oWytn1eAN4v6mVpo6O+zC1k/6k+8DzlWE9oArn8yRS+LVmjodaQvnAf5AX7ooEpEkzJSp1vWmqAFJOVrUyl8bg+KA4eQPI/37igmTZKKkxLD40kqM6wqW1o77vTMZvVrpNVK5G7m0GNYudEjc=
    rooms:
      - secure: G2Vusym37c8C5Opee14JXdbVQGNe56e8G2xTM1zeBignME9/pbg3F4+DumvRV1pE6A/RHjlG3socbdIFnoMecG+nUXE3hymNoKrjI/FnPClDulxXllNFMZgWhafq6giX7bXgyaudNFVa2PZkPPzjr6SsGngcR/BAHcz2FqqGDr161TJMU/8BshnSMhxAfxSwFg2GnDMOgar2R3UYVkjhWqnIzM5YrpdeqzVofeM5kJaoq73gxQEnaneywLvHfSCSjDXSxIZm54L97kkpg3a4njZ/CHqUB19yY+IsE1tAygS3515+F6kZPOi1PJ7jPq5Ht3kFgpaTXrOmrXd8HeMJuKEdFKkgTD0NEIvYQfNmUZHhA25an+ePG3e45CNf8IMB0dyWmH6vY05lBujB/5plo2Fsx+HBjx14kq/z7ZWdX70qSYDJIWqLGGMnnHzkULLCBPhRKqXQsXERl0ST6BeDWCekEFtvFd+6gQjwcRgo3+AquUhobgFUVs4JzZYfStZEyxEG9sdxy1wVZjVWHCN+U75095oWytn1eAN4v6mVpo6O+zC1k/6k+8DzlWE9oArn8yRS+LVmjodaQvnAf5AX7ooEpEkzJSp1vWmqAFJOVrUyl8bg+KA4eQPI/37igmTZKKkxLD40kqM6wqW1o77vTMZvVrpNVK5G7m0GNYudEjc=
    template:
       # - "Build <%{build_url}|#%{build_number}> (<%{compare_url}|%{commit}>) of %{repository}@%{branch} by %{author} %{result} in %{duration} subject: %{commit_subject} message: %{commit_message}"
          - "Build <%{build_url}|#%{build_number}> (<%{compare_url}|%{commit}>) of %{repository}@%{branch} %{result} in %{duration} %{commit_message}"
